// keys and values
// keys are unique
// objects and maps lets us assigne values to keys etc
//maps better than objects due to superior keys and size properties
// eg: map string keys to return value for a string key

let a = new Map();
let key_1="string key";
a.set(key_1, 'return value for a string key');
console.log(a);  // Map {"string key" => 'return value for a string key'}

------------------------------
//add additional keys
let a = new Map();
let key_1="string key";
let key_2={a:'key'};    //object key
let key_3=function(){};    // empty function key
a.set(key_1, 'return value for a string key');
a.set(key_2, 'return value for a object key');
a.set(key_3, 'return value for a function key');
console.log(a);  // Map {"string key" => "return value for a string key',
// Object {a:"key" => 'return value for a object key",
// function => 'return value for a function key'}
------------------------------------
// how to iterate through maps
//map can take an array of length 2 and convert that into a map

let numArr = [[1, 'one'], [2,'two'], [3,'three']];
let valMap= new Map(numArr);
console.log(valMap);// Map {1=> "one", 2=>"two", 3=> "three"}

----------------------------------------
// helper methods for maps called entries
// use enhanced for loop to map keys and values 1 at a time and print them

for (let [key, value] of valMap.entries()){
console.log('${key} points to ${value}')
}  // 1 points to one   2 points to two  etc


----------------------------------------
//how manu time each char showed up in a string

let string = 'kjnfuyvslijcoasdqojdyrgybax';
let letters = new Map();
for (let i=0; i<string.length; i++){
  let letter = string[i];
  if (!letters.has(letter)){
    letters.set(letter, 1);  // if does not have that letter add 1
  } else{
    letters.set(letter, letters.get(letter)+1);
}}
console.log(letters);// Map {"a" = > 5, .......}
